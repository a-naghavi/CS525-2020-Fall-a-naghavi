fun
main() =
(
let
val N=8
in
let
val print_dots=(
fix pd(i: int): _ =>
  if i > 0 then
   let val _ = print ". " in pd(i-1) end
  else ()
)
in
let 
val print_row=(
lam(i: int) =>
 let val _ = print_dots (i) in
 let val _ = print ("Q ") in
 let val _ = print_dots (N-i-1) in
 print "\n";
 end
 end
 end
)
in
let
	val print_board = lam (bd:int*(int*(int*(int*(int*(int*(int*int))))))) =>
(
  let val _ = print_row (bd.0) in
  let val _ = print_row ((bd.1).0) in
  let val _ = print_row (((bd.1).1).0) in
  let val _ = print_row ((((bd.1).1).1).0) in
  let val _ = print_row (((((bd.1).1).1).1).0) in
  let val _ = print_row ((((((bd.1).1).1).1).1).0) in
  let val _ = print_row (((((((bd.1).1).1).1).1).1).0) in
  let val _ = print_row (((((((bd.1).1).1).1).1).1).1) in
  	print("\n")
  end
  end
  end
  end
  end
  end
  end
  end

)

in

let
	val board_get =
	(
	lam (bd:int*(int*(int*(int*(int*(int*(int*int))))))) => 
	lam (i:int):int =>
	(
  if i = 0 then bd.0
  else if i = 1 then (bd.1).0
  else if i = 2 then ((bd.1).1).0
  else if i = 3 then (((bd.1).1).1).0
  else if i = 4 then ((((bd.1).1).1).1).0
  else if i = 5 then (((((bd.1).1).1).1).1).0
  else if i = 6 then ((((((bd.1).1).1).1).1).1).0
  else if i = 7 then ((((((bd.1).1).1).1).1).1).1
  else -1
	)
	)

in

let 
	val board_set =
	(
	lam (bd:int*(int*(int*(int*(int*(int*(int*int))))))) => 
	lam (i:int) =>
	lam (j:int) =>
	(
	let	val x0 = board_get(bd)(0) in
	let	val x1 = board_get(bd)(1) in
	let	val x2 = board_get(bd)(2) in
	let	val x3 = board_get(bd)(3) in
	let	val x4 = board_get(bd)(4) in
	let	val x5 = board_get(bd)(5) in
	let	val x6 = board_get(bd)(6) in
	let	val x7 = board_get(bd)(7) in

	if i = 0 then let
    val x0 = j in (x0,(x1,(x2,(x3,(x4,(x5,(x6, x7)))))))
  end else if i = 1 then let
    val x1 = j in (x0,(x1,(x2,(x3,(x4,(x5,(x6, x7)))))))
  end else if i = 2 then let
    val x2 = j in (x0,(x1,(x2,(x3,(x4,(x5,(x6, x7)))))))
  end else if i = 3 then let
    val x3 = j in (x0,(x1,(x2,(x3,(x4,(x5,(x6, x7)))))))
  end else if i = 4 then let
    val x4 = j in (x0,(x1,(x2,(x3,(x4,(x5,(x6, x7)))))))
  end else if i = 5 then let
    val x5 = j in (x0,(x1,(x2,(x3,(x4,(x5,(x6, x7)))))))
  end else if i = 6 then let
    val x6 = j in (x0,(x1,(x2,(x3,(x4,(x5,(x6, x7)))))))
  end else if i = 7 then let
    val x7 = j in (x0,(x1,(x2,(x3,(x4,(x5,(x6, x7)))))))
  end else bd

	end
	end
	end
	end
	end
	end
	end
	end

	)
	)
in
let 


val safety_test1=
  (
  lam (i0:int) =>
  lam (j0:int) =>
  lam (i1:int) =>
  lam (j1:int):bool =>
  (
  if j0 != j1 then
    if (i0-i1) != (j0-j1) then
      if (i1-i0) != (j0-j1) then
        0=0
      else
        0=1
    else
      0=1
  else 
    0=1
  )
  )


in
let
val safety_test2=
  (
  fix st2(i0:int):int->int*(int*(int*(int*(int*(int*(int*int))))))->int->bool =>
  lam (j0:int) =>
  lam (bd:int*(int*(int*(int*(int*(int*(int*int))))))) =>
  lam (i:int):bool =>
  (
  if i >= 0 then
    if safety_test1(i0)(j0)(i)(board_get(bd)(i)) then
      st2 (i0)(j0)(bd)(i-1)
    else 0=1
  else 0=0
  )
  )


in
let
val search=
  (
  fix find(bd:int*(int*(int*(int*(int*(int*(int*int))))))):int->int->int->int =>
  lam (i:int) =>
  lam (j:int) =>
  lam (nsol:int):int =>
  (
    if (j < N) then
    let
      val test = safety_test2 (i)(j)(bd)(i-1)
    in
      if test then
      let
        val bd1 = board_set (bd)(i)(j)
      in
        if i+1 = N then
          let val _ = print ("Solution #") in
          let val _ = print (nsol+1) in
          let val _ = print (":\n\n") in
          let val _ = print_board (bd1) in
            find(bd)(i)(j+1)(nsol+1)
          end
          end
          end
          end
            
        else
          find(bd1)(i+1)(0)(nsol)

      end
      else
        find (bd)(i)(j+1)(nsol)
    end
    else
    if i > 0 then
     find (bd)(i-1)(board_get(bd)(i-1) + 1)(nsol) else nsol
  )
  )



in
let val bd=(0,(0,(0,(0,(0,(0,(0,0)))))))
in
	let val a=search (bd)(0)(0)(0)
  in
    let val _ = print("20")
    in
      6
    end
  end

end (*for bd*)

end (*for search*)
end (*for safety_test2*)
end (*for safety_test1*)
end (*for board_set*)
end (*for board_get*)
end (*for print_board*)
end (*for print_row*)
end (*for print_dots*)
end (*for N*)
)